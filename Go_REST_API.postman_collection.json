{
	"info": {
		"_postman_id": "997d12fc-c03c-4e58-808c-db25c66885a9",
		"name": "Go_REST_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27688809",
		"_collection_link": "https://raquelteam.postman.co/workspace/Go-Rest-API~36b472f6-1ad4-4775-9302-343f2fec5b2f/collection/27688809-997d12fc-c03c-4e58-808c-db25c66885a9?action=share&source=collection_link&creator=27688809"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "New User - Valid Data (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId\", pm.response.json().id);\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"checkUserCreation\"));\r",
									"checkUserCreation();\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						},
						"description": "This endpoint allows you to create a new user by sending a POST request to the specified URL. The request should include the user's name, email, status, and gender in the request body.\n\n### Request Body\n\n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `status` (string): The status of the user.\n    \n- `gender` (string): The gender of the user.\n    \n\n### Response\n\nUpon successful creation, the endpoint returns a JSON object with the following fields:\n\n- `id` (number): The unique identifier of the created user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nThe HTTP status code for a successful creation is 201 (Created)."
					},
					"response": []
				},
				{
					"name": "New User - No Token Provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 401\", function(){\r",
									"    pm.response.to.have.status(401);\r",
									"    });\r",
									"\r",
									"pm.test(\"Authentication Failed\", function(){\r",
									"        pm.expect(pm.environment.get(\"messageAuthFailed\")).to.eql(pm.response.json().message)\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - Email Already Been Taken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"        pm.response.to.have.status(422);\r",
									"        });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" alredy exists\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageAlredyExists\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Name\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Email\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Status\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Gender\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldGender\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - Invalid \"Email\" Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field is invalid\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageInvalidField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"joao@\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - Invalid \"Status\" Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field is invalid\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"false\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - Invalid \"Gender\" Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldGender\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"girl\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Name\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Email\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    // \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Status\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    // \"status\": \"{{userStatus}}\"\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - \"Gender\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldGender\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\"\r\n    // \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User - All Fields Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5b9b8f02f7479b264f601b4c4ec0d77591561ea6b623d974ba02649057091a6d",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"name\": \"{{userName}}\",\r\n    // \"email\": \"{{userEmail}}\",\r\n    // \"status\": \"{{userStatus}}\"\r\n    // // \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve All Without Parameters (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"All users have the expected fields.\", function () {\r",
									"    const users = pm.response.json(); \r",
									"    users.forEach((user) => {\r",
									"        pm.expect(user).to.have.property('id');\r",
									"        pm.expect(user).to.have.property('name');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('gender');\r",
									"        pm.expect(user).to.have.property('status');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}",
							"host": [
								"{{Url}}{{Users}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve All with Page Parameter (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"All users have the expected fields.\", function () {\r",
									"    const users = pm.response.json(); \r",
									"    users.forEach((user) => {\r",
									"        pm.expect(user).to.have.property('id');\r",
									"        pm.expect(user).to.have.property('name');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('gender');\r",
									"        pm.expect(user).to.have.property('status');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}?page=5",
							"host": [
								"{{Url}}{{Users}}"
							],
							"query": [
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve Users by Name (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"All users have the expected fields.\", function () {\r",
									"    const users = pm.response.json(); \r",
									"    users.forEach((user) => {\r",
									"        pm.expect(user).to.have.property('id');\r",
									"        pm.expect(user).to.have.property('name');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('gender');\r",
									"        pm.expect(user).to.have.property('status');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}?name={{userName}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{userName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve User by Valid ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Name is true\", function(){\r",
									"    pm.expect(pm.environment.get(\"userName\")).to.eql(pm.response.json().name);\r",
									"    });\r",
									"\r",
									"pm.test(\"Email is true\", function(){\r",
									"    pm.expect(pm.environment.get(\"userEmail\")).to.eql(pm.response.json().email);\r",
									"    });\r",
									"\r",
									" pm.test(\"Gender is true\", function(){\r",
									"    pm.expect(pm.environment.get(\"userGender\")).to.eql(pm.response.json().gender);\r",
									"    });\r",
									"\r",
									"pm.test(\"Status is true\", function(){\r",
									"    pm.expect(pm.environment.get(\"userStatus\")).to.eql(pm.response.json().status);\r",
									"     });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve User by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve User by Invalid String ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/test",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Retrieve User by Invalid special caracter ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/@#$",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"@"
							],
							"hash": "$"
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Name (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Email (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Status  (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentStatus = pm.environment.get(\"userStatus\");\r",
									"    var newStatus = currentStatus === \"active\" ? \"inactive\" : \"active\";\r",
									"    pm.environment.set(\"userStatus\", newStatus);\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Gender (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentGender = pm.environment.get(\"userGender\");\r",
									"    var newGender = currentGender === \"male\" ? \"female\" : \"male\";\r",
									"    pm.environment.set(\"userGender\", newGender);\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Name by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Email by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Status by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentStatus = pm.environment.get(\"userStatus\");\r",
									"    var newStatus = currentStatus === \"active\" ? \"inactive\" : \"active\";\r",
									"    pm.environment.set(\"userStatus\", newStatus);\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Gender by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentGender = pm.environment.get(\"userGender\");\r",
									"    var newGender = currentGender === \"male\" ? \"female\" : \"male\";\r",
									"    pm.environment.set(\"userGender\", newGender);\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Name Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"usertField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"usertField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Email Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Status Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"usertField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"usertField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"\",\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Gender Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"usertField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"usertField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldGender\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\",\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Name (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Email (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Status  (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentStatus = pm.environment.get(\"userStatus\");\r",
									"    var newStatus = currentStatus === \"active\" ? \"inactive\" : \"active\";\r",
									"    pm.environment.set(\"userStatus\", newStatus);\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{userStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Gender (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"validateUserEdit\"));\r",
									"validateUserEdit();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentGender = pm.environment.get(\"userGender\");\r",
									"    var newGender = currentGender === \"male\" ? \"female\" : \"male\";\r",
									"    pm.environment.set(\"userGender\", newGender);\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Name by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Email by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"}, 2000);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Status by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentStatus = pm.environment.get(\"userStatus\");\r",
									"    var newStatus = currentStatus === \"active\" ? \"inactive\" : \"active\";\r",
									"    pm.environment.set(\"userStatus\", newStatus);\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{userStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Gender by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    var currentGender = pm.environment.get(\"userGender\");\r",
									"    var newGender = currentGender === \"male\" ? \"female\" : \"male\";\r",
									"    pm.environment.set(\"userGender\", newGender);\r",
									"}, 2000);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gender\": \"{{userGender}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Name Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"usertField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"usertField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Email Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"userField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Status Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"usertField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"usertField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Update User Empty Gender Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"usertField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"usertField\") + \" field can't be blank, can be male or female\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldGender\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Delete User by Valid User ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 204 after deletion\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"verifyUserDeletion\"));\r",
									"verifyUserDeletion();\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Delete User by Invalid User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No user was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "New Post - No Token Provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 401\", function(){\r",
									"    pm.response.to.have.status(401);\r",
									"    });\r",
									"\r",
									"pm.test(\"Authentication Failed\", function(){\r",
									"        pm.expect(pm.environment.get(\"messageAuthFailed\")).to.eql(pm.response.json().message)\r",
									"    });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Post - Valid Data (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"postId\", pm.response.json().id);\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"verifyPostCreation\"));\r",
									"verifyPostCreation();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Post - \"Title\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Post - \"Body\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Post - \"Title\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Post - \"Body\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\"\r\n    // \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Post - Invalid User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field must exist\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageMustExist\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}878/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}878",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve All Without Parameters (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"All posts have the expected fields.\", function () {\r",
									"    const posts = pm.response.json(); \r",
									"    posts.forEach((post) => {\r",
									"        pm.expect(post).to.have.property('id');\r",
									"        pm.expect(post).to.have.property('user_id');\r",
									"        pm.expect(post).to.have.property('title');\r",
									"        pm.expect(post).to.have.property('body');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}",
							"host": [
								"{{Url}}{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve All with Page Parameter (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"All posts have the expected fields.\", function () {\r",
									"    const posts = pm.response.json(); \r",
									"    posts.forEach((post) => {\r",
									"        pm.expect(post).to.have.property('id');\r",
									"        pm.expect(post).to.have.property('user_id');\r",
									"        pm.expect(post).to.have.property('title');\r",
									"        pm.expect(post).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}?page=4",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"query": [
								{
									"key": "page",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve Post by Valid Post ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All posts have the expected fields.\", function () {\r",
									"    const post = pm.response.json(); \r",
									"    pm.expect(post).to.have.property('id');\r",
									"    pm.expect(post).to.have.property('user_id');\r",
									"    pm.expect(post).to.have.property('title');\r",
									"    pm.expect(post).to.have.property('body');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve Post by Invalid Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"No post was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}875",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}875"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve Posts by Valid User ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All posts have the expected fields.\", function () {\r",
									"    const posts = pm.response.json(); \r",
									"    posts.forEach((post) => {\r",
									"        pm.expect(post).to.have.property('id');\r",
									"        pm.expect(post).to.have.property('user_id');\r",
									"        pm.expect(post).to.have.property('title');\r",
									"        pm.expect(post).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Posts}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Posts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve Posts by Title (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All posts have the expected fields.\", function () {\r",
									"    const posts = pm.response.json(); \r",
									"    posts.forEach((post) => {\r",
									"        pm.expect(post).to.have.property('id');\r",
									"        pm.expect(post).to.have.property('user_id');\r",
									"        pm.expect(post).to.have.property('title');\r",
									"        pm.expect(post).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}?title={{postTitle}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"query": [
								{
									"key": "title",
									"value": "{{postTitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Retrieve Posts by Body (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All posts have the expected fields.\", function () {\r",
									"    const posts = pm.response.json(); \r",
									"    posts.forEach((post) => {\r",
									"        pm.expect(post).to.have.property('id');\r",
									"        pm.expect(post).to.have.property('user_id');\r",
									"        pm.expect(post).to.have.property('title');\r",
									"        pm.expect(post).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}?body={{postBody}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"query": [
								{
									"key": "body",
									"value": "{{postBody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Title (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyPostEdit\"));\r",
									"verifyPostEdit();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Body (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyPostEdit\"));\r",
									"verifyPostEdit();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Title  by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No post was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}875",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}875"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Body by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No post was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}875",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}875"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post with Empty Title Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"posttField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"posttField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"\",\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post with Empty Body Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\",\r\n    \"body\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Title (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyPostEdit\"));\r",
									"verifyPostEdit();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Body (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyPostEdit\"));\r",
									"verifyPostEdit();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Title  by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No post was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"{{postTitle}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}875",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}875"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post Body by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No post was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\":\"{{postBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}875",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}875"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post with Empty Title Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"posttField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"posttField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Update Post with Empty Body Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"postField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"postField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Delete Post by Valid Post ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyPostDeletion\"));\r",
									"verifyPostDeletion();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post - Delete Post by Invalid Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No post was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}578",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}578"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "New Comment - No Token Provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 401\", function(){\r",
									"    pm.response.to.have.status(401);\r",
									"    });\r",
									"\r",
									"pm.test(\"Authentication Failed\", function(){\r",
									"        pm.expect(pm.environment.get(\"messageAuthFailed\")).to.eql(pm.response.json().message)\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - Valid Data (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"commentId\", pm.response.json().id);\r",
									"\r",
									"eval(pm.globals.get(\"verifyCommentCreation\"));\r",
									"\r",
									"verifyCommentCreation();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - \"Name\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"// pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - \"Email\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank, is invalid\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldAndInvalid\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"// pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - \"Body\" Field Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"// pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - Invalid \"Email\" Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field is invalid\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageInvalidField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"// pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"joão@\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - \"Name\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"// pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - \"Email\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank, is invalid\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldAndInvalid\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"// pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    // \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - \"Body\" Field Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"// pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\"\r\n    // \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Comment - Invalid Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" ID must exist in the URL field\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageMustExist\")).to.eql(pm.response.json()[0].message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"eval(pm.globals.get(\"createPostForUser\"));\r",
									"createPostForUser();\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"\r",
									"pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Posts}}/{{postId}}858/{{Comments}}",
							"host": [
								"{{Url}}{{Posts}}"
							],
							"path": [
								"{{postId}}858",
								"{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve All Without Parameters (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"All comments have the expected fields.\", function () {\r",
									"    const comments = pm.response.json(); \r",
									"    comments.forEach((comment) => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('post_id');\r",
									"        pm.expect(comment).to.have.property('name');\r",
									"        pm.expect(comment).to.have.property('email');\r",
									"        pm.expect(comment).to.have.property('body');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}",
							"host": [
								"{{Url}}{{Comments}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve All with Page Parameter (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"All comments have the expected fields.\", function () {\r",
									"    const comments = pm.response.json(); \r",
									"    comments.forEach((comment) => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('post_id');\r",
									"        pm.expect(comment).to.have.property('name');\r",
									"        pm.expect(comment).to.have.property('email');\r",
									"        pm.expect(comment).to.have.property('body');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}?page=2",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve Comment by Valid Comment ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Comment have the expected fields.\", function () {\r",
									"    const comment = pm.response.json(); \r",
									"    pm.expect(comment).to.have.property('id');\r",
									"    pm.expect(comment).to.have.property('post_id');\r",
									"    pm.expect(comment).to.have.property('name');\r",
									"    pm.expect(comment).to.have.property('email');\r",
									"    pm.expect(comment).to.have.property('body');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve Comment by Invalid Comment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"No comment was found with this Comment ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}471",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}471"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve Comment by Valid Post ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All comments have the expected fields.\", function () {\r",
									"    const comments = pm.response.json(); \r",
									"    comments.forEach((comment) => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('post_id');\r",
									"        pm.expect(comment).to.have.property('name');\r",
									"        pm.expect(comment).to.have.property('email');\r",
									"        pm.expect(comment).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}?post_id={{postId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve Comment by Name (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All comments have the expected fields.\", function () {\r",
									"    const comments = pm.response.json(); \r",
									"    comments.forEach((comment) => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('post_id');\r",
									"        pm.expect(comment).to.have.property('name');\r",
									"        pm.expect(comment).to.have.property('email');\r",
									"        pm.expect(comment).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}?name={{commentName}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{commentName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Retrieve Comment by Email (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All comments have the expected fields.\", function () {\r",
									"    const comments = pm.response.json(); \r",
									"    comments.forEach((comment) => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('post_id');\r",
									"        pm.expect(comment).to.have.property('name');\r",
									"        pm.expect(comment).to.have.property('email');\r",
									"        pm.expect(comment).to.have.property('body');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}?email={{commentEmail}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"query": [
								{
									"key": "email",
									"value": "{{commentEmail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Name (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentEdit\"));\r",
									"verifyCommentEdit();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Email (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentEdit\"));\r",
									"verifyCommentEdit();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"}, 2000);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Body (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentEdit\"));\r",
									"verifyCommentEdit();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Name by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No comments was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}874",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}874"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Email by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No comments was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}874",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}874"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Body by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No comments was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}844",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}844"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment with Empty Name Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment with Empty Email Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldAndInvalid\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"\",\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment with Empty Body Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\",\r\n    \"email\": \"{{commentEmail}}\",\r\n    \"body\": \"\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Name (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentEdit\"));\r",
									"verifyCommentEdit();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Email (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentEdit\"));\r",
									"verifyCommentEdit();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{commentEmail}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Body (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentEdit\"));\r",
									"verifyCommentEdit();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Name by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No comments was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{commentName}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}877",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}877"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Email by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No comments was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{commentEmail}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}849",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}849"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment Body by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"No comments was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"setTimeout(function() {\r",
									"    pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"}, 2000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{commentBody}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}933",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}933"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment with Empty Name Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment with Empty Email Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankFieldAndInvalid\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Update Comment with Empty Body Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 422\", function(){\r",
									"    pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"commentField\", pm.response.json()[0].field);\r",
									"\r",
									"pm.test(pm.environment.get(\"commentField\") + \" field can't be blank\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageBlankField\")).to.eql(pm.response.json()[0].message);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Delete Comment  By Valid Comment ID (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.globals.get(\"verifyCommentDeletion\"));\r",
									"verifyCommentDeletion();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Delete Comment  By Invalid Comment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function(){\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"pm.test(\"No comment was found with this ID\", function() {\r",
									"    pm.expect(pm.environment.get(\"messageResourceNotFound\")).to.eql(pm.response.json().message);\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createCommentForPostForUser\"));\r",
									"createCommentForPostForUser();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Comments}}/{{commentId}}592",
							"host": [
								"{{Url}}{{Comments}}"
							],
							"path": [
								"{{commentId}}592"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Todos",
			"item": [
				{
					"name": "New Todos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"eval(pm.globals.get(\"getRandomStatus\"));\r",
									"eval(pm.globals.get(\"getRandomGender\"));\r",
									"\r",
									"pm.environment.set(\"userStatus\", getRandomStatus());\r",
									"pm.environment.set(\"userGender\", getRandomGender());\r",
									"\r",
									"\r",
									"eval(pm.globals.get(\"createUser\"));\r",
									"createUser();\r",
									"\r",
									"\r",
									"pm.environment.set(\"todosTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'))\r",
									"\r",
									"\r",
									"const moment = require('moment');\r",
									"\r",
									"\r",
									"function getRandomDate(start, end) {\r",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"}\r",
									"\r",
									"let startDate = new Date(); \r",
									"let endDate = new Date();\r",
									"endDate.setDate(endDate.getDate() + 30); \r",
									"\r",
									"let randomDate = getRandomDate(startDate, endDate);\r",
									"\r",
									"let dueOn = moment(randomDate).utcOffset(\"+05:30\").format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"\r",
									"pm.environment.set(\"todosDate\", dueOn);\r",
									"\r",
									"\r",
									"function getRandomTodosStatus() {\r",
									"    var statuses = [\"completed\", \"pending\"];\r",
									"    var randomIndex = Math.floor(Math.random() * statuses.length);\r",
									"    return statuses[randomIndex];\r",
									"}\r",
									"\r",
									"pm.environment.set(\"todosStatus\", getRandomTodosStatus());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"todosId\", pm.response.json().id);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Todos\")}/${pm.environment.get(\"todosId\")}`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    try{\r",
									"        pm.expect(response.json()).to.exist; \r",
									"        testResult = true;\r",
									"    }catch(error){\r",
									"        testResult = false;\r",
									"        pm.test(\"Create New Todos\", function () {\r",
									"            pm.expect(true).to.eql(testResult);\r",
									"        });\r",
									"    }\r",
									"    if (testResult !== false){\r",
									"        pm.test(\"New Todos created and saved in the database.\", function () {\r",
									"            pm.expect(pm.environment.get(\"todosId\")).to.eql(response.json().id);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Status Code is 201\", function(){\r",
									"            pm.response.to.have.status(201);\r",
									"        });\r",
									"\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": { \"type\": \"integer\" },\r",
									"                \"user_id\": { \"type\": \"integer\" },\r",
									"                \"title\": { \"type\": \"string\" },\r",
									"                \"due_on\": { \r",
									"                    \"type\": \"string\", \r",
									"                    \"format\": \"date-time\" \r",
									"            },\r",
									"                \"status\": { \r",
									"                    \"type\": \"string\", \r",
									"                    \"enum\": [\"pending\", \"completed\"] \r",
									"                }\r",
									"            },\r",
									"            \"required\": [\"id\", \"user_id\", \"title\", \"due_on\", \"status\"]\r",
									"        };\r",
									"\r",
									"\r",
									"        pm.test('Schema is valid', function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"\r",
									"        pm.test(\"User ID is true\", function(){\r",
									"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json().user_id);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Title is true\", function(){\r",
									"            pm.expect(pm.environment.get(\"todosTitle\")).to.eql(response.json().title); \r",
									"        });\r",
									"\r",
									"        pm.test('Validate due_on format', function () {\r",
									"            const moment = require('moment');\r",
									"            const dueOn = pm.response.json().due_on;\r",
									"            const isValidDate = moment(dueOn, moment.ISO_8601, true).isValid();\r",
									"            pm.expect(isValidDate).to.be.true;\r",
									"        });\r",
									"\r",
									"        pm.test(\"Status is true\", function(){\r",
									"            pm.expect(pm.environment.get(\"todosStatus\")).to.eql(response.json().status); \r",
									"        });\r",
									"\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{todosTitle}}\",\r\n    \"due_on\": \"{{todosDate}}\",\r\n    \"status\": \"{{todosStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Users}}/{{userId}}/{{Todos}}",
							"host": [
								"{{Url}}{{Users}}"
							],
							"path": [
								"{{userId}}",
								"{{Todos}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate schema, due_on and  status completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"user_id\": { \"type\": \"integer\" },\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"due_on\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"status\": { \"type\": \"string\", \"enum\": [\"pending\", \"completed\"] }\r",
									"        },\r",
									"        \"required\": [\"id\", \"user_id\", \"title\", \"due_on\", \"status\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Validate status of todos', function () {\r",
									"    const todos = pm.response.json(); \r",
									"    let completedCount = 0;\r",
									"    let pendingCount = 0;\r",
									"\r",
									"    todos.forEach((todo) => {\r",
									"        if (todo.status === 'completed') {\r",
									"            completedCount++;\r",
									"        } else {\r",
									"            pendingCount++;\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.test('At least one item is completed', function () {\r",
									"        pm.expect(completedCount).to.be.at.least(1);\r",
									"    });\r",
									"\r",
									"    pm.test('At least one item is pending', function () {\r",
									"        pm.expect(pendingCount).to.be.at.least(1);\r",
									"    });\r",
									"\r",
									"    console.log(`Completed: ${completedCount}, Pending: ${pendingCount}`);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Validate due_on format', function () {\r",
									"    const todos = pm.response.json();\r",
									"    todos.forEach(todo => {\r",
									"        const isValidDate = moment(todo.due_on, moment.ISO_8601, true).isValid();\r",
									"        pm.expect(isValidDate).to.be.true;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}{{Todos}}",
							"host": [
								"{{Url}}{{Todos}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Gerando um status \"active\" ou \"inactive\" para o user\r",
					"\r",
					"function getRandomStatus() {\r",
					"    var statuses = [\"active\", \"inactive\"];\r",
					"    var randomIndex = Math.floor(Math.random() * statuses.length);\r",
					"    return statuses[randomIndex];\r",
					"}\r",
					"\r",
					"pm.globals.set(\"getRandomStatus\", getRandomStatus.toString());\r",
					"\r",
					"//Gerando um gênero \"male\" ou \"female\" para o user\r",
					"\r",
					"function getRandomGender() {\r",
					"    var genders = [\"male\", \"female\"];\r",
					"    var randomIndex = Math.floor(Math.random() * genders.length);\r",
					"    return genders[randomIndex];\r",
					"}\r",
					"\r",
					"pm.globals.set(\"getRandomGender\", getRandomGender.toString());\r",
					"\r",
					"// Criando um user\r",
					"function createUser() {\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Users\")}`,\r",
					"        method: 'POST',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                name: `${pm.environment.get(\"userName\")}`,\r",
					"                email: `${pm.environment.get(\"userEmail\")}`,\r",
					"                status: `${pm.environment.get(\"userStatus\")}`,\r",
					"                gender: `${pm.environment.get(\"userGender\")}`\r",
					"            })\r",
					"        }\r",
					"    }, (err, response) => {\r",
					"        if (!err && response) {\r",
					"            pm.environment.set(\"userId\", response.json().id);\r",
					"        } else {\r",
					"            console.error(\"Error creating user:\", err);\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"createUser\", createUser.toString());\r",
					"\r",
					"//Criando um post para um user\r",
					"function createPostForUser() {\r",
					"    \r",
					"    eval(pm.globals.get(\"createUser\")); \r",
					"    createUser(); \r",
					"\r",
					"    setTimeout(function() {\r",
					"        \r",
					"        pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomLoremWords}}'));\r",
					"        pm.environment.set(\"postBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
					"\r",
					"        pm.sendRequest({\r",
					"            url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Users\")}/${pm.environment.get(\"userId\")}/${pm.globals.get(\"Posts\")}`,\r",
					"            method: 'POST',\r",
					"            header: {\r",
					"                \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"                \"Content-Type\": \"application/json\"\r",
					"            },\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify({\r",
					"                    title: pm.environment.get(\"postTitle\"),\r",
					"                    body: pm.environment.get(\"postBody\")\r",
					"                })\r",
					"            }\r",
					"        }, (err, response) => {\r",
					"            if (!err && response) {\r",
					"                pm.environment.set(\"postId\", response.json().id);\r",
					"                console.log(\"Post created successfully for user.\");\r",
					"            } else {\r",
					"                console.error(\"Error creating post:\", err);\r",
					"            }\r",
					"        });\r",
					"    }, 1000); \r",
					"}\r",
					"\r",
					"pm.globals.set(\"createPostForUser\", createPostForUser.toString());\r",
					"\r",
					"\r",
					"//Criando comments para um post de um user\r",
					"function createCommentForPostForUser() {\r",
					"    \r",
					"    eval(pm.globals.get(\"createPostForUser\")); \r",
					"    createPostForUser(); \r",
					"\r",
					"    setTimeout(function() {\r",
					"    \r",
					"        pm.environment.set(\"commentName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
					"        pm.environment.set(\"commentEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
					"        pm.environment.set(\"commentBody\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
					"\r",
					"       pm.sendRequest({\r",
					"            url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Posts\")}/${pm.environment.get(\"postId\")}/${pm.globals.get(\"Comments\")}`,\r",
					"            method: 'POST',\r",
					"            header: {\r",
					"                \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"                \"Content-Type\": \"application/json\"\r",
					"            },\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify({\r",
					"                    name: `${pm.environment.get(\"commentName\")}`,\r",
					"                    email: `${pm.environment.get(\"commentEmail\")}`,\r",
					"                    body: `${pm.environment.get(\"commentBody\")}`,\r",
					"                })\r",
					"            }\r",
					"        }, (err, response) => {\r",
					"            if (!err && response) {\r",
					"                pm.environment.set(\"commentId\", response.json().id);\r",
					"                console.log(\"Comment created successfully for post.\");\r",
					"            } else {\r",
					"                console.error(\"Error creating comment:\", err);\r",
					"            }\r",
					"        });\r",
					"    }, 2000); \r",
					"}\r",
					"\r",
					"pm.globals.set(\"createCommentForPostForUser\", createCommentForPostForUser.toString());\r",
					"\r",
					"\r",
					"\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Verificando se o user foi criado e salvo na BD\r",
					"function checkUserCreation() {\r",
					"\r",
					"    pm.test(\"Status Code is 201\", function() {\r",
					"        pm.response.to.have.status(201);\r",
					"    });\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Users\")}/${pm.environment.get(\"userId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        let testResult = false;\r",
					"\r",
					"        try {\r",
					"            pm.expect(response.json()).to.exist;\r",
					"            testResult = true;\r",
					"        } catch (error) {\r",
					"            testResult = false;\r",
					"            pm.test(\"Create New User\", function () {\r",
					"                pm.expect(true).to.eql(testResult);\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (testResult) {\r",
					"            pm.test(\"New User created and saved in the database.\", function () {\r",
					"                pm.expect(pm.environment.get(\"userId\")).to.eql(response.json().id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Name is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userName\")).to.eql(response.json().name);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Email is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userEmail\")).to.eql(response.json().email);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Gender is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userGender\")).to.eql(response.json().gender);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Status is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userStatus\")).to.eql(response.json().status);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"checkUserCreation\", checkUserCreation.toString());\r",
					"\r",
					"\r",
					"//Verificando se o User foi editado na BD\r",
					"function validateUserEdit() {\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Users\")}/${pm.environment.get(\"userId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        let testResult = false;\r",
					"\r",
					"        try {\r",
					"            pm.expect(response.json()).to.exist;\r",
					"            testResult = true;\r",
					"        } catch (error) {\r",
					"            testResult = false;\r",
					"            pm.test(\"Edit User\", function () {\r",
					"                pm.expect(true).to.eql(testResult);\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (testResult !== false) {\r",
					"            pm.test(\"User edited and saved in the database.\", function () {\r",
					"                pm.expect(pm.environment.get(\"userId\")).to.eql(response.json().id);\r",
					"            });\r",
					"\r",
					"            // Verificar o código de status corretamente\r",
					"            pm.test(\"Status Code is 200\", function () {\r",
					"                pm.expect(response.code).to.eql(200); // Corrige para verificar response.code\r",
					"            });\r",
					"\r",
					"            pm.test(\"Name is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userName\")).to.eql(response.json().name);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Email is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userEmail\")).to.eql(response.json().email);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Gender is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userGender\")).to.eql(response.json().gender);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Status is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userStatus\")).to.eql(response.json().status);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"validateUserEdit\", validateUserEdit.toString());\r",
					"\r",
					"//Verificando se o user foi deletado da BD\r",
					"function verifyUserDeletion() {\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Users\")}/${pm.environment.get(\"userId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        pm.test(\"Verify user is deleted from database\", function () {\r",
					"            pm.expect(response.code).to.eql(404, \"User should be deleted but still exists.\");\r",
					"        });\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyUserDeletion\", verifyUserDeletion.toString());\r",
					"\r",
					"//Verificando se o Post foi criad e salvo na BD\r",
					"function verifyPostCreation() {\r",
					"    // Verificar o status code 201 da resposta da requisição principal\r",
					"    pm.test(\"Status Code is 201\", function() {\r",
					"        pm.response.to.have.status(201);\r",
					"    });\r",
					"\r",
					"    // Fazer a requisição GET para verificar se o post foi criado\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Posts\")}/${pm.environment.get(\"postId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        let testResult = false;\r",
					"\r",
					"        try {\r",
					"            pm.expect(response.json()).to.exist;\r",
					"            testResult = true;\r",
					"        } catch (error) {\r",
					"            testResult = false;\r",
					"            pm.test(\"Create New Post\", function () {\r",
					"                pm.expect(true).to.eql(testResult);\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (testResult) {\r",
					"            pm.test(\"New Post created and saved in the database.\", function () {\r",
					"                pm.expect(pm.environment.get(\"postId\")).to.eql(response.json().id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"User Id is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"userId\")).to.eql(response.json().user_id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Title is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"postTitle\")).to.eql(response.json().title);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Body is true\", function () {\r",
					"                pm.expect(pm.environment.get(\"postBody\")).to.eql(response.json().body);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyPostCreation\", verifyPostCreation.toString());\r",
					"\r",
					"//Verificando se oPost foi editado e salvo na DB\r",
					"function verifyPostEdit() {\r",
					" \r",
					"    pm.test(\"Status Code is 200\", function () {\r",
					"        pm.response.to.have.status(200);\r",
					"    });\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Posts\")}/${pm.environment.get(\"postId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        let testResult = false;\r",
					"\r",
					"        try {\r",
					"            pm.expect(response.json()).to.exist;\r",
					"            testResult = true;\r",
					"        } catch (error) {\r",
					"            testResult = false;\r",
					"            pm.test(\"Edit Post\", function () {\r",
					"                pm.expect(true).to.eql(testResult);\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (testResult) {\r",
					"            pm.test(\"Post edited and saved in the database.\", function () {\r",
					"                pm.expect(pm.environment.get(\"postId\")).to.eql(response.json().id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"User Id is correct\", function () {\r",
					"                pm.expect(pm.environment.get(\"userId\")).to.eql(response.json().user_id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Title is correct\", function () {\r",
					"                pm.expect(pm.environment.get(\"postTitle\")).to.eql(response.json().title);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Body is correct\", function () {\r",
					"                pm.expect(pm.environment.get(\"postBody\")).to.eql(response.json().body);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyPostEdit\", verifyPostEdit.toString());\r",
					"\r",
					"\r",
					"//Verificando se o post foi deletado da DB\r",
					"function verifyPostDeletion() {\r",
					"\r",
					"    pm.test(\"Status Code is 204\", function() {\r",
					"        pm.response.to.have.status(204);\r",
					"    });\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Posts\")}/${pm.environment.get(\"postId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"\r",
					"        pm.test(\"Verify post is deleted from database\", function () {\r",
					"            pm.expect(response.code).to.eql(404);\r",
					"        });\r",
					"\r",
					"        if (response.code !== 404) {\r",
					"            pm.test(\"Post still exists when it should have been deleted.\", function () {\r",
					"                pm.expect(false).to.be.true;\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyPostDeletion\", verifyPostDeletion.toString());\r",
					"\r",
					"\r",
					"//Verificando se um Comment foi criado e salvo na DB\r",
					"function verifyCommentCreation() {\r",
					"  \r",
					"    pm.test(\"Status Code is 201\", function() {\r",
					"        pm.response.to.have.status(201);\r",
					"    });\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Comments\")}/${pm.environment.get(\"commentId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        let testResult = false;\r",
					"\r",
					"        try {\r",
					"            pm.expect(response.json()).to.exist;\r",
					"            testResult = true;\r",
					"        } catch (error) {\r",
					"            testResult = false;\r",
					"            pm.test(\"Create New Comment\", function () {\r",
					"                pm.expect(true).to.eql(testResult);\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (testResult) {\r",
					"            pm.test(\"New Comment created and saved in the database.\", function () {\r",
					"                pm.expect(pm.environment.get(\"commentId\")).to.eql(response.json().id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Post ID is true\", function() {\r",
					"                pm.expect(pm.environment.get(\"postId\")).to.eql(response.json().post_id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Name is true\", function() {\r",
					"                pm.expect(pm.environment.get(\"commentName\")).to.eql(response.json().name);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Email is true\", function() {\r",
					"                pm.expect(pm.environment.get(\"commentEmail\")).to.eql(response.json().email);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Body is true\", function() {\r",
					"                pm.expect(pm.environment.get(\"commentBody\")).to.eql(response.json().body);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyCommentCreation\", verifyCommentCreation.toString());\r",
					"\r",
					"//Verificando se o comment foi editado e salvo na BD\r",
					"function verifyCommentEdit() {\r",
					"\r",
					"    pm.test(\"Status Code is 200\", function() {\r",
					"        pm.response.to.have.status(200);\r",
					"    });\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Comments\")}/${pm.environment.get(\"commentId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        let testResult = false;\r",
					"\r",
					"        try {\r",
					"            pm.expect(response.json()).to.exist;\r",
					"            testResult = true;\r",
					"        } catch (error) {\r",
					"            testResult = false;\r",
					"            pm.test(\"Edit Comment\", function () {\r",
					"                pm.expect(true).to.eql(testResult);\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (testResult) {\r",
					"            pm.test(\"Comment edited and saved in the database.\", function () {\r",
					"                pm.expect(pm.environment.get(\"commentId\")).to.eql(response.json().id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Post ID is correct\", function() {\r",
					"                pm.expect(pm.environment.get(\"postId\")).to.eql(response.json().post_id);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Name is correct\", function() {\r",
					"                pm.expect(pm.environment.get(\"commentName\")).to.eql(response.json().name);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Email is correct\", function() {\r",
					"                pm.expect(pm.environment.get(\"commentEmail\")).to.eql(response.json().email);\r",
					"            });\r",
					"\r",
					"            pm.test(\"Body is correct\", function() {\r",
					"                pm.expect(pm.environment.get(\"commentBody\")).to.eql(response.json().body);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyCommentEdit\", verifyCommentEdit.toString());\r",
					"\r",
					"//Verificando se o o comments foi deletado da BD\r",
					"function verifyCommentDeletion() {\r",
					"   \r",
					"    pm.test(\"Status Code is 204\", function() {\r",
					"        pm.response.to.have.status(204);\r",
					"    });\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.globals.get(\"Url\")}${pm.globals.get(\"Comments\")}/${pm.environment.get(\"commentsId\")}`,\r",
					"        method: 'GET',\r",
					"        header: {\r",
					"            \"Authorization\": `Bearer ${pm.environment.get(\"token\")}`,\r",
					"            \"Content-Type\": \"application/json\"\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"\r",
					"        pm.test(\"Verify comment is deleted from database\", function () {\r",
					"            pm.expect(response.code).to.eql(404);\r",
					"        });\r",
					"\r",
					"        if (response.code !== 404) {\r",
					"            pm.test(\"Comment still exists when it should have been deleted.\", function () {\r",
					"                pm.expect(false).to.be.true;\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"verifyCommentDeletion\", verifyCommentDeletion.toString());\r",
					"\r",
					"\r",
					""
				]
			}
		}
	]
}